generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String?        @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  customerId             String?        @unique // Stripe customer ID
  lemonSqueezyCustomerId String?        @unique // LemonSqueezy customer ID
  accounts               Account[]
  sessions               Session[]
  subscriptions          Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                          String    @id @default(cuid())
  userId                      String
  stripeCustomerId            String?
  stripeSubscriptionId        String?   @unique
  stripePriceId               String?
  stripeCurrentPeriodEnd      DateTime?
  lemonSqueezyCustomerId      String?
  lemonSqueezySubscriptionId  String?   @unique
  lemonSqueezyVariantId       String?
  lemonSqueezyCurrentPeriodEnd DateTime?
  paymentProvider             String    @default("stripe") // "stripe" or "lemonsqueezy"
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  user                        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                   String   @id @default(cuid())
  stripeProductId      String?  @unique
  lemonSqueezyProductId String? @unique
  name                 String
  description          String?
  active               Boolean  @default(true)
  paymentProvider      String   @default("stripe") // "stripe" or "lemonsqueezy"
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  prices               Price[]
}

model Price {
  id                  String   @id @default(cuid())
  productId           String
  stripePriceId       String?  @unique
  lemonSqueezyVariantId String? @unique
  currency            String
  interval            String?
  unitAmount          Int
  active              Boolean  @default(true)
  paymentProvider     String   @default("stripe") // "stripe" or "lemonsqueezy"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  product             Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
